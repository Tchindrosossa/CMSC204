package Converter_Utility;

/**
 * @author Tchindro Sossa
 */

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.FileNotFoundException;

public class MorseCodeConverter_STUDENT_Test {

    @Test
    public void testConvertToEnglishString() {
        String result = MorseCodeConverter.convertToEnglish(".... . .-.. .-.. --- / .-- --- .-. .-.. -..");
        assertEquals("hello world", result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testConvertEmptyString() {
        MorseCodeConverter.convertToEnglish("");
    }

    @Test
    public void testConvertToEnglishFile() throws FileNotFoundException {
        File file = new File("howDoILoveThee.txt");
        String result = MorseCodeConverter.convertToEnglish(file);
        assertEquals("how do i love thee let me count the ways", result);
    }

    @Test(expected = FileNotFoundException.class)
    public void testFileNotFound() throws FileNotFoundException {
        MorseCodeConverter.convertToEnglish(new File("nonexistent.txt"));
    }

    @Test
    public void testMultipleWords() {
        String result = MorseCodeConverter.convertToEnglish("- .... .. ... / .. ... / .- / - . ... -");
        assertEquals("this is a test", result);
    }

    @Test
    public void testSingleLetter() {
        String result = MorseCodeConverter.convertToEnglish(".");
        assertEquals("e", result);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testInvalidCharacterInString() {
        MorseCodeConverter.convertToEnglish(".-..-");
    }

    @Test(expected = IllegalArgumentException.class)
    public void testSpecialCharacters() {
        MorseCodeConverter.convertToEnglish(".-..-....-..-.--.");
    }
    
    @Test
    public void testValidateMorseCode_EmptyString() {
        String validationError = MorseCodeConverter.validateMorseCode("");
        assertNotNull("Validation should fail for empty string.", validationError);
    }

    @Test
    public void testValidateMorseCode_NullString() {
        String validationError = MorseCodeConverter.validateMorseCode(null);
        assertNotNull("Validation should fail for null string.", validationError);
    }

    @Test
    public void testValidateMorseCode_InvalidCharacters() {
        String validationError = MorseCodeConverter.validateMorseCode("...---...*");
        assertNotNull("Validation should fail for string with invalid characters.", validationError);
    }

    @Test
    public void testValidateMorseCode_ValidSOS() {
        String validationError = MorseCodeConverter.validateMorseCode("... --- ...");
        assertNull("Validation should pass for valid SOS Morse code.", validationError);
    }

    @Test
    public void testValidateMorseCode_ValidComplexCode() {
        String validationError = MorseCodeConverter.validateMorseCode("... --- ... / ... .- ...- . / --- ..- .-. / ... --- ..- .-.. ...");
        assertNull("Validation should pass for complex valid Morse code.", validationError);
    }

    @Test
    public void testValidateMorseCode_InvalidSequence() {
        String validationError = MorseCodeConverter.validateMorseCode("--/--");
        assertNotNull("Validation should fail for invalid Morse code sequence.", validationError);
    }

}

