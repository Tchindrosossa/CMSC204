package Converter_Utility;

/**
 * @author Tchindro Sossa
 */

import java.util.ArrayList;

public class MorseCodeTree implements LinkedConverterTreeInterface<String> {

    private TreeNode<String> root;

    public MorseCodeTree() {
        buildTree();
    }

    @Override
    public TreeNode<String> getRoot() {
        return root;
    }

    @Override
    public void setRoot(TreeNode<String> newNode) {
        this.root = newNode;
    }

    @Override
    public void insert(String code, String result) {
        addNode(this.root, code, result);
    }

    @Override
    public void addNode(TreeNode<String> root, String code, String letter) {
        if (code.length() == 1) {
            if (code.charAt(0) == '.') {
                root.setLeftChild(new TreeNode<String>(letter));
            } else if (code.charAt(0) == '-') {
                root.setRightChild(new TreeNode<String>(letter));
            }
        } else {
            if (code.charAt(0) == '.') {
                if (root.getLeftChild() == null) {
                    root.setLeftChild(new TreeNode<String>(null));
                }
                addNode(root.getLeftChild(), code.substring(1), letter);
            } else if (code.charAt(0) == '-') {
                if (root.getRightChild() == null) {
                    root.setRightChild(new TreeNode<String>(null));
                }
                addNode(root.getRightChild(), code.substring(1), letter);
            }
        }
    }

    @Override
    public String fetch(String code) {
        return fetchNode(this.root, code);
    }

    @Override
    public String fetchNode(TreeNode<String> root, String code) {
        if (root == null) {
            throw new IllegalArgumentException("Invalid Morse code: " + code);
        }
        if (code.isEmpty()) {
            return root.getData();
        } else {
            char firstChar = code.charAt(0);
            if (firstChar == '.') {
                return fetchNode(root.getLeftChild(), code.substring(1));
            } else if (firstChar == '-') {
                return fetchNode(root.getRightChild(), code.substring(1));
            } else {
                throw new IllegalArgumentException("Invalid Morse code character: " + firstChar);
            }
        }
    }


    @Override
    public MorseCodeTree delete(String data) throws UnsupportedOperationException {
        throw new UnsupportedOperationException("Delete operation is not supported.");
    }

    @Override
    public MorseCodeTree update() throws UnsupportedOperationException {
        throw new UnsupportedOperationException("Update operation is not supported.");
    }

    @Override
    public void buildTree() {
        root = new TreeNode<String>("");

        // Level 1
        insert(".", "e");
        insert("-", "t");

        // Level 2
        insert("..", "i");
        insert(".-", "a");
        insert("-.", "n");
        insert("--", "m");

        // Level 3
        insert("...", "s");
        insert("..-", "u");
        insert(".-.", "r");
        insert(".--", "w");
        insert("-..", "d");
        insert("-.-", "k");
        insert("--.", "g");
        insert("---", "o");

        // Level 4
        insert("....", "h");
        insert("...-", "v");
        insert("..-.", "f");
        insert(".-..", "l");
        insert(".--.", "p");
        insert(".---", "j");
        insert("-...", "b");
        insert("-..-", "x");
        insert("-.-.", "c");
        insert("-.--", "y");
        insert("--..", "z");
        insert("--.-", "q");
        // Additional mappings if needed
    }

    @Override
    public ArrayList<String> toArrayList() {
        ArrayList<String> list = new ArrayList<>();
        LNRoutputTraversal(root, list);
        return list;
    }

    @Override
    public void LNRoutputTraversal(TreeNode<String> root, ArrayList<String> list) {
        if (root != null) {
            LNRoutputTraversal(root.getLeftChild(), list);
            if (root.getData() != null) {
                list.add(root.getData());
            }
            LNRoutputTraversal(root.getRightChild(), list);
        }
    }
}
