package Double_Linked_Lists;

/**
 * @author Tchindro Sossa
 */

import java.util.ArrayList;
import java.util.Comparator;
import java.util.ListIterator;
import java.util.NoSuchElementException;

public class BasicDoubleLinkedList<T> implements Iterable<T> {
    protected Node head; 		// Reference to the first node in the list
    protected Node tail;		// Reference to the last node in the list
    protected int size;			// Current size of the list

    // Constructor: Initializes an empty linked list. 
    // It also initialies the head and tail as null 
    public BasicDoubleLinkedList() {
        head = null;
        tail = null;
        size = 0;
    }

    // Traverse the list and count the nodes
    public int getSize() {
        int size = 0;
        Node current = head;

        while (current != null) {
            size++;
            current = current.next;
        }
        return size;
    }

    // Inner class StringComparator
    public static class StringComparator implements Comparator<String> {
        @Override
        public int compare(String a, String b) {
            return a.compareTo(b);
        }
    }

    // Inner class Node represents a node in the linked list
    protected class Node {
        T data;				// Data stored in the node
        Node next;			// Reference to the next node
        Node prev;			// Reference to the previous node

        // Constructor for Node class
        Node(T data) {
            this.data = data;
            this.next = null;
            this.prev = null;
        }
    }

    // Method to add a new node to the end of the list
    public void addToEnd(T data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
        size++;
    }
    // Method to add a new node to the front of the list
    public void addToFront(T data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
        size++;
    }

    // Method to retrieve and remove the first element from the list
    public T retrieveFirstElement() {
        if (isEmpty()) {
            System.out.println("List is empty");
            return null; // Or any other special value
        }
        T data = head.data;
        head = head.next;

        if (head != null) {
            head.prev = null;
        } else {
            tail = null;
        }
        size--;

        return data;
    }

    // Method to retrieve and remove the last element from the list
    public T retrieveLastElement() {
        if (isEmpty()) {
            System.out.println("List is empty");
            return null; // Or any other special value
        }
        T data = tail.data;
        tail = tail.prev;

        if (tail != null) {
            tail.next = null;
        } else {
            head = null;
        }
        size--;

        return data;
    }

    // Method to remove a node with target data using a provided comparator
    public boolean remove(T targetData, Comparator<T> comparator) {
        Node current = head;
        while (current != null) {
            if (comparator.compare(current.data, targetData) == 0) {
                if (current == head) {
                    return removeFirst();
                } else if (current == tail) {
                    return removeLast();
                } else {
                    current.prev.next = current.next;
                    current.next.prev = current.prev;
                    size--;
                    return true;
                }
            }
            current = current.next;
        }
        return false;
    }

    // Method to get the data of the first element in the list
    public T getFirst() {
        if (isEmpty()) {
            System.out.println("List is empty");
            return null; // Or any other special value
        }
        return head.data;
    }
 // Method to get the data of the last element in the list
    public T getLast() {
        if (isEmpty()) {
            System.out.println("List is empty");
            return null; // Or any other special value
        }
        return tail.data;
    }

    // Method to check if the list is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Method to get the current size of the list
    public int size() {
        return size;
    }

    // Method to remove the first elements from the list
    protected boolean removeFirst() {
        if (isEmpty()) {
            throw new NoSuchElementException("List is empty");
        }
        head = head.next;
        if (head != null) {
            head.prev = null;
        } else {
            tail = null;
        }
        size--;
        return true;
    }

 // Method to remove the last elements from the list
    protected boolean removeLast() {
        if (isEmpty()) {
            throw new NoSuchElementException("List is empty");
        }
        tail = tail.prev;
        if (tail != null) {
            tail.next = null;
        } else {
            head = null;
        }
        size--;
        return true;
    }

    // Method to convert the linked list to an ArrayList
    public ArrayList<T> toArrayList() {
        ArrayList<T> list = new ArrayList<T>();
        Node current = head;
        while (current != null) {
            list.add(current.data);
            current = current.next;
        }
        return list;
    }

    // Iterator method to enable enhanced for loop (for-each) iteration
    @Override
    public ListIterator<T> iterator() {
    	return new DoubleLinkedListIterator();
    }
    
    // Inner class DoubleLinkedListIterator implements ListIterator
    public class DoubleLinkedListIterator implements ListIterator<T> {
            private Node current = head;
            private Node lastReturned = null;
            private int index = 0;

            // Checks if the list has the next element 
            // Returns true if there is next element and false for no next element 
            @Override
            public boolean hasNext() {
                return current != null;
            }

            // Checks the next element in the list
            @Override
            public T next() {
                if (!hasNext()) {
                    throw new NoSuchElementException("Next Failure! At end of list");
                }
                T data = current.data;
                lastReturned = current;
                current = current.next;
                index++;
                return data;
            }

            // Checks if the list has previous element 
            // Returns true if there is previous element and false for no previous element 
            @Override
            public boolean hasPrevious() {
                return current != null && current.prev != null;
            }

            // Checks the previous element in the list
            @Override
            public T previous() {
                if (!hasPrevious()) {
                    throw new NoSuchElementException("Previous Failure! At beginning of list");
                }
                if (current == null) {
                    current = tail;
                } else {
                    current = current.prev;
                }
                lastReturned = current;
                index--;
                return current.data;
            }

            // Method to get the index of the next element 
            @Override
            public int nextIndex() {
                return index;
            }

            // method to get the index of the previous element
            @Override
            public int previousIndex() {
                return index - 1;
            }

            // Method to remove the last returned element
            @Override
            public void remove() {
                if (lastReturned == null) {
                	// If no element has been returned by this iterator, throw UnsupportedOperationException
                    throw new UnsupportedOperationException("remove() is not supported at this time");
                }
                Node lastNext = lastReturned.next;
                Node lastPrev = lastReturned.prev;

                if (lastPrev == null) {
                	// If the last returned element was the head, update the head
                    head = lastNext;
                } else {
                	// If the last returned element was not the head, adjust the next reference of the previous element 
                    lastPrev.next = lastNext;
                    lastReturned.prev = null;
                }

                if (lastNext == null) {
                	// If the last returned element was the tail, update the tail
                    tail = lastPrev;
                } else {
                	// If the last returned element was not the tail, adjust the prev reference of the next element
                    lastNext.prev = lastPrev;
                    lastReturned.next = null;
                }

                if (current == lastReturned) {
                	// If the current position is the last returned element, move the current position
                    current = lastNext;
                } else {
                	// If the current position is after the last returned element, adjust the index
                    index--;
                }
                lastReturned = null;
                size--;
            }

            // Method to set the data of the last returned element 
            @Override
            public void set(T data) {
                if (lastReturned == null) {
                	// If no element has been returned by this iterator, throw UnsupportedOperationException
                    throw new UnsupportedOperationException("set() is not supported at this time");
                }
                lastReturned.data = data;
            }

            // Method to add a new element before the current position
            @Override
            public void add(T data) {
                if (current == null) {
                	// If the current position is null (end of the list), add to the end
                    addToEnd(data);
                    current = tail;
                } else {
                	// If the current position is not null, add before the current position
                    Node newNode = new Node(data);
                    Node prevNode = current.prev;
                    newNode.next = current;
                    newNode.prev = prevNode;
                    current.prev = newNode;
                    if (prevNode == null) {
                    	// If the current position was the head, update the head
                        head = newNode;
                    } else {
                    	// If the current position was not the head, adjust the next reference of the previous element
                        prevNode.next = newNode;
                    }
                    size++;
                    index++;
                }
                lastReturned = null;
            }
        };
    }
    
 // Defines a custom comparator for natural order
    class NaturalOrderComparator<T extends Comparable<T>> implements Comparator<T> {
        @Override
        public int compare(T a, T b) {
            return a.compareTo(b);
        }
    }
